<?xml version="1.0" encoding="utf-8"?>

<nta>
  <declaration>
    // Channels
    broadcast chan callUp[3], callDown[3], requestMove, stopMove, arrivedFloor;

    // Track if each passenger calls
    bool callPlacedUp[3] = { false, false, false };
    bool callPlacedDown[3] = { false, false, false };
    bool reachedDestination[3] = { false, false, false };

    // Invariants to ensure floor is always within [-1..3]
    const int MIN_FLOOR = -1;
    const int MAX_FLOOR = 3;

    // Global clocks
    clock globalClock;
  </declaration>

  <template>
    <name>Elevator</name>
    <declaration>
      bool moving = false;
      int c_floor = 0;
    </declaration>
    <location id="id0" x="145" y="162">
      <name x="136" y="128">Idle</name>
    </location>
    <location id="id1" x="553" y="162">
      <name x="587" y="153">Moving</name>
    </location>
    <init ref="id0"/>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="synchronisation">requestMove?</label>
      <label kind="assignment">moving = true</label>
    </transition>
    <transition>
      <source ref="id1"/>
      <target ref="id0"/>
      <label kind="synchronisation">stopMove?</label>
      <label kind="assignment">moving = false</label>
    </transition>
    <transition>
      <source ref="id1"/>
      <target ref="id1"/>
      <label kind="guard">moving && (c_floor &lt; MAX_FLOOR)</label>
      <label kind="synchronisation">arrivedFloor!</label>
      <label kind="assignment">c_floor += 1</label>
    </transition>
    <transition>
      <source ref="id1"/>
      <target ref="id1"/>
      <label kind="guard">moving && (c_floor &gt; MIN_FLOOR)</label>
      <label kind="synchronisation">arrivedFloor!</label>
      <label kind="assignment">c_floor -= 1</label>
    </transition>
  </template>

  <template>
    <name>Dispatcher</name>
    <declaration>
      // Listens for calls from any passenger
    </declaration>
    <location id="idDisp" x="0" y="0">
      <name>Monitor</name>
    </location>
    <init ref="idDisp"/>
    <!-- Handle up-calls -->
    <transition>
      <label kind="select">i : int[0,2]</label>
      <source ref="idDisp"/>
      <target ref="idDisp"/>
      <label kind="guard">callPlacedUp[i]</label>
      <label kind="synchronisation">requestMove!</label>
      <label kind="assignment">callPlacedUp[i] = false</label>
    </transition>
    <!-- Handle down-calls -->
    <transition>
      <label kind="select">j : int[0,2]</label>
      <source ref="idDisp"/>
      <target ref="idDisp"/>
      <label kind="guard">callPlacedDown[j]</label>
      <label kind="synchronisation">requestMove!</label>
      <label kind="assignment">callPlacedDown[j] = false</label>
    </transition>
    <!-- Stop elevator when a passengerâ€™s destination is reached -->
    <transition>
      <label kind="select">k : int[0,2]</label>
      <source ref="idDisp"/>
      <target ref="idDisp"/>
      <label kind="guard">reachedDestination[k]</label>
      <label kind="synchronisation">stopMove!</label>
      <label kind="assignment">reachedDestination[k] = false</label>
    </transition>
  </template>

  <template>
    <name>Passenger</name>
    <parameter>const int pId</parameter>
    <declaration>
      // Each passenger can place calls, then wait for arrival
    </declaration>
    <location id="idWait" x="0" y="0">
      <name>Waiting</name>
    </location>
    <location id="idRide" x="200" y="0">
      <name>Riding</name>
    </location>
    <location id="idArrive" x="400" y="0">
      <name>Arrived</name>
    </location>
    <init ref="idWait"/>
    <transition>
      <source ref="idWait"/>
      <target ref="idRide"/>
      <label kind="synchronisation">callUp[pId]!</label>
      <label kind="assignment">callPlacedUp[pId] = true</label>
    </transition>
    <transition>
      <source ref="idWait"/>
      <target ref="idRide"/>
      <label kind="synchronisation">callDown[pId]!</label>
      <label kind="assignment">callPlacedDown[pId] = true</label>
    </transition>
    <transition>
      <source ref="idRide"/>
      <target ref="idArrive"/>
      <label kind="synchronisation">arrivedFloor?</label>
      <label kind="assignment">reachedDestination[pId] = true</label>
    </transition>
  </template>

  <system>
    // Instantiate processes
    El = Elevator();
    D = Dispatcher();
    P0 = Passenger(0);
    P1 = Passenger(1);
    P2 = Passenger(2);

    // Compose the system
    system El, D, P0, P1, P2;
  </system>


</nta>