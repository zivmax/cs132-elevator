<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Simplified system constants for reduced state space
const int MIN_FLOOR = 0;      
const int MAX_FLOOR = 3;      
const int NUM_ELEVATORS = 2;  

// Simplified timing constants
const int FLOOR_TRAVEL_TIME = 1;  
const int DOOR_OPERATION_TIME = 1;
const int DOOR_TIMEOUT = 2;       // Reduced from 3

// Elevator states (simplified)
typedef int[0,2] ElevatorState_t;
const int IDLE = 0;
const int MOVING_UP = 1;
const int MOVING_DOWN = 2;

// Door states (simplified to 2 states)
typedef int[0,1] DoorState_t;
const int DOOR_CLOSED = 0;
const int DOOR_OPEN = 1;

// Simplified global state variables with proper initialization
ElevatorState_t elevator_state[NUM_ELEVATORS] = {IDLE, IDLE};
DoorState_t door_state[NUM_ELEVATORS] = {DOOR_CLOSED, DOOR_CLOSED};
int[MIN_FLOOR,MAX_FLOOR] current_floor[NUM_ELEVATORS] = {0, 1}; // Start at different floors
bool floor_arrival_announced[NUM_ELEVATORS] = {false, false};
bool operation_success = true;

// Simplified task queue (reduced capacity)
const int MAX_TASKS = 1;  // Further reduced to 1
int[MIN_FLOOR,MAX_FLOOR] task_queue_floor[NUM_ELEVATORS][MAX_TASKS];
int[0,MAX_TASKS] task_queue_size[NUM_ELEVATORS] = {0, 0};

// Simplified call tracking
const int MAX_CALLS = 1;  // Reduced to 1
int[0,MAX_CALLS] next_call_id = 0;

// Simplified timing variables
clock elevator_timer[NUM_ELEVATORS];
clock door_timer[NUM_ELEVATORS];

// Core channels - remove urgent from channels with clock guards in SystemEnvironment
chan call_elevator, select_floor; // Removed urgent
urgent chan operationComplete, operationFailed;

// Regular channels for timed operations
chan floor_arrived, door_closed;</declaration>
	<template>
		<name>ElevatorController</name>
		<parameter>const int id</parameter>
		<declaration>// Simplified controller</declaration>
		<location id="id0" x="0" y="0">
			<name x="-25" y="-42">Idle</name>
		</location>
		<location id="id1" x="200" y="0">
			<name x="161" y="17">Processing</name>
		</location>
		<location id="id2" x="400" y="0">
			<name x="366" y="-42">Active</name>
		</location>
		<location id="id3" x="100" y="-100">
			<name x="66" y="-134">Error</name>
		</location>
		<init ref="id0"/>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-110" y="-119">call_elevator?</label>
			<label kind="assignment" x="-272" y="-153">operation_success = (next_call_id &lt; MAX_CALLS)</label>
			<nail x="-59" y="-110"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-93" y="85">select_floor?</label>
			<label kind="assignment" x="-348" y="110">operation_success = (task_queue_size[id] &lt; MAX_TASKS)</label>
			<nail x="51" y="93"/>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="348" y="93">operation_success</label>
			<label kind="synchronisation" x="348" y="68">operationComplete!</label>
			<nail x="374" y="127"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="127" y="-93">!operation_success</label>
			<label kind="synchronisation" x="127" y="-76">operationFailed!</label>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id0"/>
			<nail x="297" y="-25"/>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id0"/>
		</transition>
	</template>
	<template>
		<name>CallDispatcher</name>
		<declaration>// Simplified dispatcher
int selected_elevator = 0;</declaration>
		<location id="id10" x="0" y="0">
			<name x="-34" y="-42">Ready</name>
		</location>
		<location id="id11" x="200" y="0">
			<name x="170" y="-42">Processing</name>
		</location>
		<location id="id12" x="400" y="0">
			<name x="366" y="-42">Assigned</name>
		</location>
		<init ref="id10"/>
		<transition id="id13">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-263" y="51">next_call_id &lt; MAX_CALLS</label>
			<label kind="synchronisation" x="-229" y="68">call_elevator?</label>
			<label kind="assignment" x="-255" y="85">selected_elevator = 0</label>
			<nail x="-42" y="110"/>
		</transition>
		<transition id="id14">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="85" y="238">task_queue_size[0] &lt; MAX_TASKS</label>
			<label kind="synchronisation" x="178" y="212">select_floor?</label>
			<label kind="assignment" x="42" y="263">task_queue_floor[0][task_queue_size[0]] = 3,
task_queue_size[0] = task_queue_size[0] + 1</label>
			<nail x="221" y="221"/>
		</transition>
		<transition id="id15">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="assignment" x="306" y="34">next_call_id = (next_call_id + 1) % MAX_CALLS</label>
			<nail x="297" y="17"/>
		</transition>
		<transition id="id16">
			<source ref="id12"/>
			<target ref="id10"/>
			<nail x="297" y="-110"/>
		</transition>
	</template>
	<template>
		<name>MovementSystem</name>
		<parameter>const int id</parameter>
		<declaration>// Simplified movement system</declaration>
		<location id="id17" x="0" y="0">
			<name x="-34" y="-42">Ready</name>
		</location>
		<location id="id18" x="200" y="0">
			<name x="170" y="-42">Moving</name>
			<label kind="invariant" x="93" y="8">elevator_timer[id] &lt;= FLOOR_TRAVEL_TIME</label>
		</location>
		<location id="id19" x="400" y="0">
			<name x="366" y="-42">Arrived</name>
		</location>
		<init ref="id17"/>
		<transition id="id20">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-93" y="-238">task_queue_size[id] &gt; 0 &amp;&amp; 
current_floor[id] != task_queue_floor[id][0] &amp;&amp; 
door_state[id] == DOOR_CLOSED</label>
			<label kind="assignment" x="-306" y="-187">elevator_timer[id] = 0, 
elevator_state[id] = (task_queue_floor[id][0] &gt; current_floor[id]) ? MOVING_UP : MOVING_DOWN</label>
			<nail x="93" y="-161"/>
		</transition>
		<transition id="id21">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="297" y="238">elevator_timer[id] == FLOOR_TRAVEL_TIME</label>
			<label kind="assignment" x="272" y="272">current_floor[id] = (elevator_state[id] == MOVING_UP) ? current_floor[id] + 1 : current_floor[id] - 1,
elevator_state[id] = IDLE</label>
			<nail x="476" y="255"/>
		</transition>
		<transition id="id22">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-323" y="127">current_floor[id] == task_queue_floor[id][0] &amp;&amp; task_queue_size[id] &gt; 0</label>
			<label kind="synchronisation" x="-76" y="59">floor_arrived!</label>
			<label kind="assignment" x="-187" y="93">floor_arrival_announced[id] = true</label>
			<nail x="-59" y="127"/>
		</transition>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="34" y="-374">current_floor[id] != task_queue_floor[id][0] &amp;&amp; task_queue_size[id] &gt; 0</label>
			<label kind="assignment" x="170" y="-425">elevator_timer[id] = 0, 
elevator_state[id] = (task_queue_floor[id][0] &gt; current_floor[id]) ? MOVING_UP : MOVING_DOWN</label>
			<nail x="297" y="-365"/>
		</transition>
		<transition id="id24">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="688" y="-229">task_queue_size[id] == 0</label>
			<nail x="816" y="-212"/>
			<nail x="0" y="-50"/>
		</transition>
	</template>
	<template>
		<name>DoorSystem</name>
		<parameter>const int id</parameter>
		<declaration>// Simplified door system</declaration>
		<location id="id25" x="0" y="0">
			<name x="-34" y="-42">Ready</name>
		</location>
		<location id="id26" x="200" y="0">
			<name x="170" y="-42">Open</name>
			<label kind="invariant" x="119" y="25">door_timer[id] &lt;= DOOR_TIMEOUT</label>
		</location>
		<init ref="id25"/>
		<transition id="id27">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-51" y="204">floor_arrival_announced[id] &amp;&amp; 
door_state[id] == DOOR_CLOSED &amp;&amp; 
elevator_state[id] == IDLE</label>
			<label kind="assignment" x="-42" y="161">door_state[id] = DOOR_OPEN, 
door_timer[id] = 0</label>
			<nail x="42" y="195"/>
		</transition>
		<transition id="id28">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="17" y="-204">door_timer[id] == DOOR_TIMEOUT</label>
			<label kind="synchronisation" x="85" y="-187">door_closed!</label>
			<label kind="assignment" x="17" y="-255">door_state[id] = DOOR_CLOSED,
floor_arrival_announced[id] = false</label>
			<nail x="93" y="-170"/>
		</transition>
		<transition id="id29">
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="guard" x="-314" y="-8">door_state[id] == DOOR_OPEN</label>
			<label kind="assignment" x="-306" y="17">door_state[id] = DOOR_CLOSED</label>
			<nail x="-170" y="127"/>
			<nail x="-136" y="-34"/>
		</transition>
	</template>
	<template>
		<name>TaskManager</name>
		<parameter>const int id</parameter>
		<declaration>// Simplified task manager</declaration>
		<location id="id30" x="0" y="0">
			<name x="-34" y="-42">Monitoring</name>
		</location>
		<init ref="id30"/>
		<transition id="id31">
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="guard" x="-280" y="-42">task_queue_size[id] &gt; 0</label>
			<label kind="synchronisation" x="-238" y="-17">door_closed?</label>
			<label kind="assignment" x="-348" y="8">task_queue_size[id] = task_queue_size[id] - 1</label>
			<nail x="-161" y="51"/>
			<nail x="-170" y="-42"/>
		</transition>
		<transition id="id32">
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="102" y="-119">floor_arrived?</label>
			<nail x="195" y="0"/>
			<nail x="195" y="-85"/>
		</transition>
	</template>
	<template>
		<name>SystemEnvironment</name>
		<declaration>// Simplified environment
int operation_count = 0;
clock env_timer;</declaration>
		<location id="id33" x="0" y="0">
			<name x="-42" y="-68">Operating</name>
			<label kind="invariant" x="-59" y="-42">env_timer &lt;= 3</label>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="144" y="0">operationComplete?</label>
			<nail x="100" y="50"/>
			<nail x="144" y="17"/>
		</transition>
		<transition id="id35">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-204" y="42">operationFailed?</label>
			<nail x="-100" y="50"/>
			<nail x="-110" y="17"/>
		</transition>
		<transition id="id36">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-42" y="-161">operation_count == 0 &amp;&amp; env_timer &gt;= 1</label>
			<label kind="synchronisation" x="-25" y="-119">call_elevator!</label>
			<label kind="assignment" x="-68" y="-178">operation_count = 1, env_timer = 0</label>
			<nail x="-76" y="-85"/>
			<nail x="17" y="-76"/>
		</transition>
		<transition id="id37">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-42" y="-136">operation_count == 1 &amp;&amp; env_timer &gt;= 1</label>
			<label kind="synchronisation" x="119" y="-68">select_floor!</label>
			<label kind="assignment" x="110" y="-51">operation_count = 2, env_timer = 0</label>
			<nail x="119" y="-17"/>
			<nail x="85" y="-42"/>
		</transition>
		<transition id="id38">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-110" y="93">floor_arrived?</label>
			<nail x="-93" y="127"/>
			<nail x="-25" y="153"/>
		</transition>
		<transition id="id39">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="102" y="127">door_closed?</label>
			<nail x="68" y="127"/>
			<nail x="136" y="119"/>
		</transition>
		<transition id="id40">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-229" y="-51">env_timer == 3</label>
			<label kind="assignment" x="-374" y="-68">env_timer = 0, operation_count = 0</label>
			<nail x="-150" y="-25"/>
			<nail x="-93" y="-59"/>
		</transition>
	</template>
	<system>// Simplified multi-elevator system
elevatorController0 = ElevatorController(0);
elevatorController1 = ElevatorController(1);

callDispatcher = CallDispatcher();

movementSystem0 = MovementSystem(0);
movementSystem1 = MovementSystem(1);

doorSystem0 = DoorSystem(0);
doorSystem1 = DoorSystem(1);

taskManager0 = TaskManager(0);
taskManager1 = TaskManager(1);

systemEnvironment = SystemEnvironment();

system elevatorController0, elevatorController1, callDispatcher, 
       movementSystem0, movementSystem1, doorSystem0, doorSystem1,
       taskManager0, taskManager1, systemEnvironment;</system>
	<queries>
		<query>
			<formula>A[] (forall (i : int[0, NUM_ELEVATORS-1]) current_floor[i] &gt;= MIN_FLOOR &amp;&amp; current_floor[i] &lt;= MAX_FLOOR)</formula>
			<comment>Safety: Elevators stay within floor bounds 0-3</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:20 +0800">
			</result>
		</query>
		<query>
			<formula>A[] (forall (i : int[0, NUM_ELEVATORS-1]) task_queue_size[i] &lt;= MAX_TASKS)</formula>
			<comment>Safety: Task queue never exceeds maximum</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:19 +0800">
			</result>
		</query>
		<query>
			<formula>A[] (forall (i : int[0, NUM_ELEVATORS-1]) (elevator_state[i] == MOVING_UP || elevator_state[i] == MOVING_DOWN) imply door_state[i] == DOOR_CLOSED)</formula>
			<comment>Safety: Doors closed during movement</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:17 +0800">
			</result>
		</query>
		<query>
			<formula>A[] (forall (i : int[0, NUM_ELEVATORS-1]) door_state[i] == DOOR_OPEN imply elevator_state[i] == IDLE)</formula>
			<comment>Safety: Doors only open when elevator is idle</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:16 +0800">
			</result>
		</query>
		<query>
			<formula>A[] (forall (i : int[0, NUM_ELEVATORS-1]) floor_arrival_announced[i] imply elevator_state[i] == IDLE)</formula>
			<comment>Safety: Floor arrival only announced when idle</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:16 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (current_floor[0] == MAX_FLOOR)</formula>
			<comment>Reachability: Elevator 0 can reach floor 3</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:15 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (current_floor[0] == MIN_FLOOR)</formula>
			<comment>Reachability: Elevator 0 can reach floor 0</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:14 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (task_queue_size[0] &gt; 0)</formula>
			<comment>Reachability: Tasks can be assigned</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:13 +0800">
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>System is deadlock-free</comment>
			<result outcome="success" type="quality" timestamp="2025-06-06 13:51:10 +0800">
			</result>
		</query>
	</queries>
</nta>
