<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>
// Constants
const int NUM_ELEVATORS = 2;
const int NUM_PASSENGERS = 2;
const int MIN_FLOOR = 0;
const int MAX_FLOOR = 9; 

const int STATE_IDLE = 0;
const int STATE_MOVING_UP = 1;
const int STATE_MOVING_DOWN = 2;

const int DOOR_CLOSED = 0;
const int DOOR_OPENED = 1;
const int DOOR_OPENING = 2;
const int DOOR_CLOSING = 3;

const int TIME_DOOR_OPERATE = 1; // seconds
const int TIME_FLOOR_TRAVEL = 2; // seconds per floor
const int TIME_DOOR_OPEN_TIMEOUT = 3; // seconds to auto-close

// NEW: Call Management Constants and Types
const int MAX_CALLS = 4; // Max number of concurrent calls system can handle
const int CALL_STATE_IDLE = 0;    // Call slot is free or call is completed
const int CALL_STATE_PENDING = 1; // Call is waiting for an elevator
const int CALL_STATE_ASSIGNED = 2;// Call has been assigned to an elevator
const int NO_CALL_IDX = -1;     // Special call_idx for internal elevator requests
const int NO_CALLER_ID = 0;     // Special call_idx for internal elevator requests
const int NO_TARGET_FLOOR = MIN_FLOOR - 1;     // Special 

const int DIR_DOWN= 0; 
const int DIR_UP= 1; 

bool initialized = false;

// Types defined before use in structs
typedef int[MIN_FLOOR-1, MAX_FLOOR] floor_t;
typedef int[0, NUM_ELEVATORS-1] elevator_id_t;
typedef int[0, NUM_PASSENGERS-1] passenger_id_t;
typedef int[0,1] direction_t; // 0 for DOWN, 1 for UP

// Channels for communication
chan make_call[passenger_id_t][floor_t][direction_t];
chan elv_doors_opened[elevator_id_t][floor_t];
chan press_elv_button[passenger_id_t][elevator_id_t][floor_t];
chan assign_task[elevator_id_t][floor_t][int[0, MAX_CALLS-1]];
chan notify_call_completed[int[0, MAX_CALLS-1]];

typedef struct {
	passenger_id_t struct_caller_pid; // Renamed
	floor_t struct_call_floor;       // Renamed
	direction_t struct_direction;    // Renamed
	int struct_state;                // Renamed // Uses CALL_STATE_* constants
} call_info_t;

// Global state variables
bool passenger_arrived[NUM_PASSENGERS];


call_info_t system_calls[int[0, MAX_CALLS-1]];

void init_system_calls() { // Initializes only system-wide call structures
	// Initialize system calls array
	for (i_call_init : int[0, MAX_CALLS-1]) { 
		system_calls[i_call_init].struct_state = CALL_STATE_IDLE;
		system_calls[i_call_init].struct_caller_pid = NO_CALLER_ID;
		system_calls[i_call_init].struct_call_floor = NO_TARGET_FLOOR;
		system_calls[i_call_init].struct_direction = DIR_DOWN;
	}
}

int add_new_call(passenger_id_t pid_param, floor_t floor_param, direction_t dir_param) {
	// Ensure loop variables are function-local if not using for-each style declaration
	int i_call; 
	for (i_call = 0; i_call &lt; MAX_CALLS; i_call++) { // Changed to C-style for loop for clarity on 'i'
		if (system_calls[i_call].struct_state == CALL_STATE_IDLE) {
			system_calls[i_call].struct_caller_pid = pid_param;
			system_calls[i_call].struct_call_floor = floor_param;
			system_calls[i_call].struct_direction = dir_param;
			system_calls[i_call].struct_state = CALL_STATE_PENDING;
			return i_call;
		}
	}
	return -1; 
}
	</declaration>
	<template>
		<name>Elevator</name>
		<parameter>const elevator_id_t eid</parameter>
		<declaration>clock clk_d;
clock t_travel;
direction_t move_dir; // Current/intended movement direction for this elevator instance
bool needs_to_move = false; // Flag set by process_next_target for this elevator instance

floor_t current_floor; // This elevator's current floor
int door_state;        // This elevator's door state (DOORS_CLOSED, DOOR_OPENED, etc.)
int q_len;             // Number of tasks in this elevator's queue
floor_t target_q[int[0, NUM_PASSENGERS]]; // Queue of target floors for this elevator
int target_call_idx_q[int[0, NUM_PASSENGERS]]; // Corresponding call_idx for each target floor

// Helper function to determine if the next floor (after one step, considering skip-0) is the target.
// Uses local current_floor of this elevator instance.
bool is_next_floor_target(floor_t local_current_f_param, direction_t dir_param, floor_t target_f_param) {
    int d_val = (dir_param == 1 ? 1 : -1);
    floor_t floor_after_one_step = local_current_f_param + d_val;
    if (floor_after_one_step == 0 &amp;&amp; target_f_param != 0 &amp;&amp; MIN_FLOOR &lt; 0 &amp;&amp; MAX_FLOOR &gt; 0) {
        floor_after_one_step += d_val;
    }
    return floor_after_one_step == target_f_param;
}

// Add a task (floor, call_idx) to this elevator's local queue.
void add_to_queue(floor_t f_param, int call_idx_param) {
    bool already_exists_in_queue_flag = false;
    bool current_task_matches_request_flag = false;
    int k_q_loop;

    if (q_len &lt; NUM_PASSENGERS) { // Check against capacity (NUM_PASSENGERS)
        k_q_loop = 0;
        while(k_q_loop &lt; q_len &amp;&amp; !already_exists_in_queue_flag) {
            if (target_q[k_q_loop] == f_param) {
                if (call_idx_param != NO_CALL_IDX) {
                    if (target_call_idx_q[k_q_loop] == call_idx_param) {
                        already_exists_in_queue_flag = true;
                    }
                } else {
                    if (target_call_idx_q[k_q_loop] == NO_CALL_IDX) {
                        already_exists_in_queue_flag = true;
                    }
                }
            }
            k_q_loop++;
        }

        // Check if the request matches the current active target (target_q[0])
        if (q_len &gt; 0 &amp;&amp; target_q[0] == f_param) {
             if (call_idx_param != NO_CALL_IDX &amp;&amp; target_call_idx_q[0] == call_idx_param) {
                 current_task_matches_request_flag = true;
             } else if (call_idx_param == NO_CALL_IDX &amp;&amp; target_call_idx_q[0] == NO_CALL_IDX) {
                 // New request is internal, current active target is internal, and floors match
                 current_task_matches_request_flag = true;
             }
        }

        if (!already_exists_in_queue_flag &amp;&amp; !current_task_matches_request_flag) {
            target_q[q_len] = f_param;
            target_call_idx_q[q_len] = call_idx_param;
            q_len++;
        }
    }
}

// Process the next target from this elevator's local queue.
void process_next_target() {
    int k_shift_loop;
    needs_to_move = false; // Default: not moving

    if (q_len &gt; 0) {
        floor_t head_target_floor = target_q[0];
        // int head_target_call_idx = target_call_idx_q[0]; // Current call_idx at head

        if (current_floor == head_target_floor) {
            // Current floor is the target. Service it (e.g., open doors). Dequeue the task.
            for (k_shift_loop = 0; k_shift_loop &lt; q_len - 1; k_shift_loop++) {
                target_q[k_shift_loop] = target_q[k_shift_loop+1];
                target_call_idx_q[k_shift_loop] = target_call_idx_q[k_shift_loop+1];
            }
            q_len--;

            // Clear the slot that became empty at the new end of the queue.
            // target_q[q_len] is the correct slot to clear (either target_q[0] if q_len became 0,
            // or the slot after the new last element).
            // The original check 'q_len &lt; NUM_PASSENGERS' is to ensure q_len is a valid index if NUM_PASSENGERS is array size.
            if (q_len &lt; NUM_PASSENGERS) { 
                 target_q[q_len] = NO_TARGET_FLOOR;
                 target_call_idx_q[q_len] = NO_CALL_IDX;
            }
            needs_to_move = false; // Will not move; will service current floor.
        } else {
            // Current floor is not the head_target_floor, so we need to move towards it.
            needs_to_move = true;
            if (head_target_floor &gt; current_floor) {
                move_dir = DIR_UP;
            } else { // head_target_floor &lt; current_floor
                move_dir = DIR_DOWN;
            }
        }
    } else {
        // q_len is 0, no targets.
        needs_to_move = false;
        // move_dir could be left as is, or set to a neutral/idle direction if one exists.
        // target_q[0] should be NO_TARGET_FLOOR due to initialization or previous clearing.
    }
}



// Door Operations (uses local door_state for this elevator instance)
void handle_door_opening() { 
    door_state = DOOR_OPENING;
    clk_d = 0;
    if (q_len &gt; 0) {
        int k_shift_loop;
        for (k_shift_loop = 0; k_shift_loop &lt; q_len - 1; k_shift_loop++) {
            target_q[k_shift_loop] = target_q[k_shift_loop+1];
            target_call_idx_q[k_shift_loop] = target_call_idx_q[k_shift_loop+1];
        }
        q_len--;

        // Clear the slot that became empty at the new end of the queue.
        if (q_len &lt; NUM_PASSENGERS) { 
             target_q[q_len] = NO_TARGET_FLOOR;
             target_call_idx_q[q_len] = NO_CALL_IDX;
        }
    }
}

void handle_door_opened() { 
    door_state = DOOR_OPENED;
    clk_d = 0;
}

void handle_door_closing() { 
    door_state = DOOR_CLOSING;
    clk_d = 0;
}

void handle_door_closed() { 
    door_state = DOOR_CLOSED;
    clk_d = 0;
    // current_task_call_idx = NO_CALL_IDX; // REMOVED - active task is managed by queue
}

// Movement Operations (uses local current_floor for this elevator instance)
void advance_current_floor_one_step() {
    int direction_val = (move_dir == DIR_UP ? 1 : -1);
    current_floor += direction_val;
    // Skip-zero logic: if current_floor becomes 0, but target_q[0] (the destination) is not 0.
    // This check assumes that if needs_to_move is true, q_len &gt; 0 and target_q[0] is the valid destination.
    if (current_floor == 0 &amp;&amp; (q_len &gt; 0 &amp;&amp; target_q[0] != 0 &amp;&amp; target_q[0] != NO_TARGET_FLOOR) &amp;&amp; MIN_FLOOR &lt; 0 &amp;&amp; MAX_FLOOR &gt; 0) {
        current_floor += direction_val;
    }
    t_travel = 0; 
}

void prepare_for_movement() { 
    t_travel = 0;                
}

void arrived_at_target_floor() { 
    advance_current_floor_one_step(); 
}

void handle_moving() { 
    advance_current_floor_one_step(); 
}

// Initialization function for local elevator state
void init_local_elevator_state() {
    current_floor = 1; // Default start floor
    door_state = DOOR_CLOSED;
    q_len = 0;
    // Assuming NUM_PASSENGERS is the capacity, so indices are 0 to NUM_PASSENGERS-1
    // The original code had two loops here; this consolidates to one correct loop.

    for (i_init_q : int[0, NUM_PASSENGERS]) { 
        target_q[i_init_q] = NO_TARGET_FLOOR;
        target_call_idx_q[i_init_q] = NO_CALL_IDX;
    }
}</declaration>
		<location id="id0" x="-1861" y="144">
			<name x="-1931" y="114">InitElevator</name>
			<committed/>
		</location>
		<location id="id1" x="-1598" y="230">
			<name x="-1649" y="204">Idle</name>
		</location>
		<location id="id2" x="-1598" y="-76">
			<name x="-1666" y="-68">Moving</name>
			<label kind="invariant" x="-1581" y="-102">t_travel &lt;= TIME_FLOOR_TRAVEL &amp;&amp; door_state == DOOR_CLOSED</label>
		</location>
		<location id="id3" x="-654" y="229">
			<name x="-637" y="195">D_Opening</name>
			<label kind="invariant" x="-637" y="238">clk_d &lt;= TIME_DOOR_OPERATE</label>
		</location>
		<location id="id4" x="-654" y="629">
			<name x="-646" y="603">D_Open</name>
			<label kind="invariant" x="-747" y="646">clk_d &lt;= TIME_DOOR_OPEN_TIMEOUT</label>
		</location>
		<location id="id5" x="-1598" y="629">
			<name x="-1700" y="620">D_Closing</name>
			<label kind="invariant" x="-1794" y="637">clk_d &lt;= TIME_DOOR_OPERATE</label>
		</location>
		<location id="id6" x="-654" y="442">
			<name x="-799" y="433">Call_Completing</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id4"/>
			<nail x="-731" y="535"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-1836" y="127">init_local_elevator_state()</label>
		</transition>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-561" y="501">target_call_idx_q[0] != NO_CALL_IDX</label>
			<label kind="synchronisation" x="-561" y="518">notify_call_completed[target_call_idx_q[0]]!</label>
			<nail x="-578" y="535"/>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="-2193" y="484">process_next_target()</label>
			<nail x="-2117" y="484"/>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-348" y="595">p_id_sel : passenger_id_t, f_param : floor_t</label>
			<label kind="synchronisation" x="-348" y="621">press_elv_button[p_id_sel][eid][f_param]?</label>
			<label kind="assignment" x="-348" y="646">add_to_queue(f_param, NO_CALL_IDX), clk_d=0</label>
			<nail x="-365" y="629"/>
		</transition>
		<transition id="id12">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-646" y="323">clk_d &gt;= TIME_DOOR_OPERATE</label>
			<label kind="synchronisation" x="-646" y="340">elv_doors_opened[eid][current_floor]!</label>
			<label kind="assignment" x="-646" y="357">handle_door_opened()</label>
		</transition>
		<transition id="id13">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="-2057" y="646">f_param : floor_t, c_idx_param : int[0, MAX_CALLS-1]</label>
			<label kind="synchronisation" x="-2057" y="663">assign_task[eid][f_param][c_idx_param]?</label>
			<label kind="assignment" x="-2057" y="688">add_to_queue(f_param, c_idx_param)</label>
			<nail x="-1930" y="629"/>
		</transition>
		<transition id="id14">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="-2244" y="238">p_id_sel : passenger_id_t, f_param : floor_t</label>
			<label kind="synchronisation" x="-2244" y="255">press_elv_button[p_id_sel][eid][f_param]?</label>
			<label kind="assignment" x="-2244" y="272">add_to_queue(f_param, NO_CALL_IDX)</label>
			<nail x="-1904" y="230"/>
		</transition>
		<transition id="id15">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-1504" y="204">target_q[0] != NO_TARGET_FLOOR &amp;&amp; current_floor == target_q[0]</label>
			<label kind="assignment" x="-1504" y="187">handle_door_opening()</label>
		</transition>
		<transition id="id16">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1360" y="68">needs_to_move</label>
			<label kind="assignment" x="-1360" y="51">prepare_for_movement(), needs_to_move = false</label>
			<nail x="-1368" y="76"/>
		</transition>
		<transition id="id17">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-1419" y="613">clk_d &gt;= TIME_DOOR_OPEN_TIMEOUT</label>
			<label kind="assignment" x="-1462" y="630">handle_door_closing()</label>
		</transition>
		<transition id="id18">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-1691" y="399">clk_d &gt;= TIME_DOOR_OPERATE</label>
			<label kind="assignment" x="-1691" y="424">handle_door_closed()</label>
		</transition>
		<transition id="id19">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-2329" y="25">t_travel &gt;= TIME_FLOOR_TRAVEL &amp;&amp; is_next_floor_target(current_floor, move_dir, target_q[0])</label>
			<label kind="assignment" x="-2329" y="42">arrived_at_target_floor()</label>
		</transition>
		<transition id="id20">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-1972" y="-340">t_travel &gt;= TIME_FLOOR_TRAVEL &amp;&amp; !is_next_floor_target(current_floor, move_dir, target_q[0])</label>
			<label kind="assignment" x="-1972" y="-323">handle_moving()</label>
			<nail x="-1598" y="-297"/>
		</transition>
	</template>
	<template>
		<name>Passenger</name>
		<parameter>const passenger_id_t pid, const floor_t p_start_floor, const floor_t p_dest_floor</parameter>
		<declaration>
clock x;
elevator_id_t boarded_elevator_id;
		</declaration>
		<location id="id21" x="0" y="0">
			<name x="-34" y="8">AtStart</name>
		</location>
		<location id="id22" x="153" y="119">
			<name x="136" y="136">Waiting</name>
		</location>
		<location id="id23" x="578" y="119">
			<name x="552" y="127">Boarding</name>
			<committed/>
		</location>
		<location id="id24" x="1164" y="119">
			<name x="1190" y="136">InElevator</name>
		</location>
		<location id="id25" x="1649" y="119">
			<name x="1674" y="116">Alighting</name>
			<committed/>
		</location>
		<location id="id26" x="1649" y="0">
			<name x="1664" y="-19">Arrived</name>
		</location>
		<init ref="id21"/>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id26"/>
			<label kind="guard" x="671" y="-51">p_start_floor == p_dest_floor</label>
			<label kind="assignment" x="671" y="-31">passenger_arrived[pid] = true</label>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="0" y="30">p_start_floor != p_dest_floor &amp;&amp; initialized</label>
			<label kind="synchronisation" x="0" y="50">make_call[pid][p_start_floor][p_dest_floor &gt; p_start_floor ? DIR_UP : DIR_DOWN]!</label>
		</transition>
		<transition id="id29">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="195" y="153">eid_sel : elevator_id_t</label>
			<label kind="synchronisation" x="195" y="119">elv_doors_opened[eid_sel][p_start_floor]?</label>
			<label kind="assignment" x="195" y="136">boarded_elevator_id = eid_sel</label>
		</transition>
		<transition id="id30">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="629" y="119">press_elv_button[pid][boarded_elevator_id][p_dest_floor]!</label>
		</transition>
		<transition id="id31">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="1224" y="93">elv_doors_opened[boarded_elevator_id][p_dest_floor]?</label>
		</transition>
		<transition id="id32">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="assignment" x="1649" y="42">passenger_arrived[pid] = true</label>
		</transition>
	</template>
	<template>
		<name>Dispatcher</name>
		<declaration>
int selected_call_idx = -1; 
int new_call_idx_holder; 
		</declaration>
		<location id="id33" x="-102" y="0">
			<name x="-112" y="-30">Idle</name>
		</location>
		<location id="id34" x="850" y="0">
			<name x="840" y="-30">Assigning</name>
			<committed/>
		</location>
		<init ref="id33"/>
		<transition id="id35">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="select" x="-467" y="-224">pid_s : passenger_id_t, f_s : floor_t, d_s : direction_t</label>
			<label kind="synchronisation" x="-467" y="-204">make_call[pid_s][f_s][d_s]?</label>
			<label kind="assignment" x="-467" y="-184">new_call_idx_holder = add_new_call(pid_s, f_s, d_s)</label>
			<nail x="-250" y="-150"/>
		</transition>
		<transition id="id36">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="select" x="178" y="-122">iter_s : int[0, MAX_CALLS-1]</label>
			<label kind="guard" x="178" y="-102">system_calls[iter_s].struct_state == CALL_STATE_PENDING</label>
			<label kind="assignment" x="178" y="-144">selected_call_idx = iter_s</label>
			<nail x="355" y="-73"/>
		</transition>
		<transition id="id37">
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="select" x="76" y="62">eid_s : elevator_id_t</label>
			<label kind="guard" x="76" y="82">selected_call_idx != -1</label>
			<label kind="synchronisation" x="76" y="102">assign_task[eid_s][system_calls[selected_call_idx].struct_call_floor][selected_call_idx]!</label>
			<label kind="assignment" x="76" y="122">system_calls[selected_call_idx].struct_state = CALL_STATE_ASSIGNED, selected_call_idx = -1</label>
			<nail x="356" y="80"/>
		</transition>
		<transition id="id38">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="select" x="-442" y="184">comp_call_idx_s : int[0, MAX_CALLS-1]</label>
			<label kind="guard" x="-442" y="224">system_calls[comp_call_idx_s].struct_state == CALL_STATE_ASSIGNED</label>
			<label kind="synchronisation" x="-442" y="204">notify_call_completed[comp_call_idx_s]?</label>
			<label kind="assignment" x="-442" y="244">system_calls[comp_call_idx_s].struct_state = CALL_STATE_IDLE</label>
			<nail x="-238" y="170"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>// Intentionally empty for this simple initializer
		</declaration>
		<location id="id39" x="0" y="0">
			<name x="-50" y="-10">Init</name>
		</location>
		<location id="id40" x="442" y="0">
			<name x="432" y="-30">Done</name>
		</location>
		<init ref="id39"/>
		<transition id="id41">
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="assignment" x="25" y="-34">init_system_calls(), initialized = true</label>
		</transition>
	</template>
	<system>
// Process instantiations
E0 = Elevator(0);
E1 = Elevator(1);
D = Dispatcher();
P0 = Passenger(0, 1, 5); 
P1 = Passenger(1, 3, 0); 
InitProc = Initializer();

// System line: lists all processes to be part of the system simulation.
system E0, E1, D, P0, P1, InitProc;
	</system>
	<queries>
		<option key="--diagnostic" value="2"/>
		<query>
			<formula>E&lt;&gt; passenger_arrived[0] &amp;&amp; passenger_arrived[1]</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-06-07 13:38:35 +0800">
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
		</query>
	</queries>
</nta>
